// Code generated by goctl. DO NOT EDIT!
// Source: userservice.proto

//go:generate mockgen -destination ./userservice_mock.go -package userservice -source $GOFILE

package userservice

import (
	"context"

	user_service "shorturl/rpc/userservice/pb"

	"github.com/tal-tech/go-zero/core/jsonx"
	"github.com/tal-tech/go-zero/zrpc"
)

type (
	UserService interface {
		GetUserInfo(ctx context.Context, in *GetUserInfoReq) (*GetUserInfoRes, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) GetUserInfo(ctx context.Context, in *GetUserInfoReq) (*GetUserInfoRes, error) {
	var request user_service.GetUserInfoReq
	bts, err := jsonx.Marshal(in)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &request)
	if err != nil {
		return nil, errJsonConvert
	}

	client := user_service.NewUserServiceClient(m.cli.Conn())
	resp, err := client.GetUserInfo(ctx, &request)
	if err != nil {
		return nil, err
	}

	var ret GetUserInfoRes
	bts, err = jsonx.Marshal(resp)
	if err != nil {
		return nil, errJsonConvert
	}

	err = jsonx.Unmarshal(bts, &ret)
	if err != nil {
		return nil, errJsonConvert
	}

	return &ret, nil
}
